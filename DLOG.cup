
import java_cup.runtime.*;
import java.util.Vector;

parser code {:
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    m.append(", column " + (s.right+1));
            }
        }
        m.append(" : " + message);
        // System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) 
        throws Exception {
        report_error(message, info);
        Exception e = null;
        throw e;
        //System.exit(1);
    }
:};

/*--------------Declaration of Terminals and Non Terminals Section-----------*/

/* Terminals (tokens returned by scanner) */

terminal                NOTOP, DOLLAR, IMPLIES, PERIOD, COMMA, LPAREN, RPAREN, ERROR; 

terminal String         NAME, COMPARISON, STRING, VARIABLE, NUMBER; 

/* Non Terminals Used in Grammar Section */

non terminal Program            ddb;

non terminal Vector<Rule>       idb_rules;

non terminal Rule               idb_rule;

non terminal Vector<Predicate>  idb_body;

non terminal Predicate          literal, predicate;  

non terminal Vector<Argument>   arg_list;

non terminal Argument           arg;

/* The Grammar for our Parser - 

ddb ::= idb_rules DOLLAR

idb_rules ::= idb_rule | idb_rule idb_rules

idb_rule ::= predicate IMPLIES idb_body PERIOD

idb_body ::= literal | literal COMMA idb_body

literal ::= NOTOP predicate | predicate

predicate ::= NAME LPAREN arg_list RPAREN | arg COMPARISON arg

arg_list ::= arg | arg COMMA arg_list

arg ::= NUMBER | STRING | VARIABLE
*/

ddb ::= idb_rules:x DOLLAR
    {: Program p = new Program();
       p.setRules(x);
       RESULT = p; :}
;
idb_rules ::= idb_rule:x
    {: Vector<Rule> rules = new Vector<Rule>();
       rules.add(x);
       RESULT = rules; :}
    |
    idb_rule:x idb_rules:y
    {: Vector<Rule> rules = new Vector<Rule>();
       rules.add(x);
       rules.addAll(y);
       RESULT = rules; :}
;
idb_rule ::= NAME:x LPAREN arg_list:y RPAREN IMPLIES idb_body:z PERIOD
    {: Predicate headPredicate  = new Predicate(); 
       headPredicate.setIsHeadPredicate(true); 
       headPredicate.setPredName(x);
       headPredicate.setArguments(y);

       Rule r = new Rule();
       r.setHeadPredicate(headPredicate);
       r.setBodyPredicates(z);
       RESULT = r; :}
;
idb_body ::= literal:x            
    {: Vector<Predicate> bodyPredicates = new Vector<Predicate>();
       bodyPredicates.add(x);
       RESULT = bodyPredicates; :}
    |
    literal:x COMMA idb_body:y
    {: Vector<Predicate> bodyPredicates = new Vector<Predicate>(); 
       bodyPredicates.add(x);
       bodyPredicates.addAll(y);
       RESULT = bodyPredicates; :}
;
literal ::= NOTOP predicate:x
    {: x.setIsNegated(true);
       RESULT = x; :}
    | 
    predicate:x
    {: x.setIsNegated(false);
       RESULT = x; :}
;
predicate ::= NAME:name LPAREN arg_list:x RPAREN 
    {: Predicate p = new Predicate();
       p.setPredName(name);
       p.setArguments(x);
       p.setIsComparison(false); 
       RESULT = p; :}
    | 
    arg:x COMPARISON:y arg:z
    {: Predicate p = new Predicate();
       p.setLeftOperand(x);
       p.setRightOperand(z);
       p.setIsComparison(true);
       p.setComparisonOperator(y);
       RESULT = p; :}
;
arg_list ::= arg:x              
    {: Vector<Argument> arguments = new Vector<Argument>();
       arguments.add(x);
       RESULT = arguments; :}
    |
    arg:x COMMA arg_list:y
    {: Vector<Argument> arguments = new Vector<Argument>();
       arguments.add(x);
       arguments.addAll(y);
       RESULT = arguments; :}
;
arg  ::= NUMBER:x                 
    {: Argument a = new Argument();
       a.setIsConstant(true);
       a.setArgDataType("NUMBER");
       a.setArgValue(x);
       RESULT = a; :}
    |
    STRING:y
    {: Argument a = new Argument();
       a.setIsConstant(true);
       a.setArgDataType("STRING");
       a.setArgValue(y);
       RESULT = a; :}
    |
    VARIABLE:z
    {: Argument a = new Argument();
       a.setIsConstant(false);
       a.setArgName(z);
       if (a.getArgName().substring(0, 1).equals("_")) {
           a.setIsUnderscore(true);
       } else {
           a.setIsUnderscore(false);
       }
       RESULT = a; :}
;
